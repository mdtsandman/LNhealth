/** Delegate for alerts **/

// need to declare before usage
void ios_finishVitalSign(bool success);

@interface AlertViewCancelDelegate : NSObject<UIAlertViewDelegate>
@end

@implementation AlertViewCancelDelegate
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)index {
    ios_finishVitalSign(false);
}
@end


/** Constants and variables **/

// vital sign code constants
typedef enum {
    HR        = 1,
    RR        = 2,
    SPO2      = 4,
    TEMP      = 8,
    BPSYS     = 16,
    BPDIA     = 32,
    RRTAPS    = 64,
    BP        = BPSYS | BPDIA,
    PO        = HR    | SPO2,
    RRATE     = RR    | RRTAPS
} VitalSignCode;

// update MAX_VITALSIGN when adding new vital sign codes
static NSUInteger const MAX_VITALSIGN = RRTAPS;
static NSUInteger const SUCCESS_CODE  = MAX_VITALSIGN * 2;

// vital sign URL schemes
static NSString *const svsHR     = @"svs-hr";
static NSString *const svsRR     = @"svs-rr";
static NSString *const svsSPO2   = @"svs-spo2";
static NSString *const svsTEMP   = @"svs-temp";
static NSString *const svsBPSYS  = @"svs-bpsys";
static NSString *const svsBPDIA  = @"svs-bpdia";
static NSString *const svsRRTAPS = @"svs-rrtaps";
static NSString *const svsBP     = @"svs-bp";
static NSString *const svsPO     = @"svs-po";
static NSString *const svsRRATE  = @"svs-rrate";

// pasteboard
UIPasteboard *pasteboard;
static NSString *const pasteboardName = @"svsPasteboard";

// dynamically-allocated variables (need to be freed)
NSMutableArray *vitalSignArray;
NSString *sourceBundleID;
AlertViewCancelDelegate *alertViewDelegate = nil;

int sign  = 0;
int state = 0;


/** Helper functions **/

NSString* getURLScheme(VitalSignCode sign) {
    switch (sign) {
        case HR:     return svsHR;
        case RR:     return svsRR;
        case SPO2:   return svsSPO2;
        case TEMP:   return svsTEMP;
        case BPSYS:  return svsBPSYS;
        case BPDIA:  return svsBPDIA;
        case RRTAPS: return svsRRTAPS;
        case BP:     return svsBP;
        case PO:     return svsPO;
        case RRATE:  return svsRRATE;
        default:     return nil;
    }
}

BOOL openURL(NSString *scheme, BOOL releaseScheme) {
    NSURL *url = [NSURL URLWithString:[scheme stringByAppendingFormat:@"://"]];
    if (releaseScheme) [scheme release];
    return [[UIApplication sharedApplication] openURL:url];
}

void showAlert(NSString *title, NSString *message) {
    UIAlertView *alert = [[UIAlertView alloc]
            initWithTitle:title message:message
            delegate:alertViewDelegate cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alert show];
    [alert release];
}

NSString* getPasteboardVal(int key) {
    if (2 * key < pasteboard.strings.count) {
        NSMutableArray *keyval = [NSMutableArray arrayWithArray:[pasteboard.strings[2 * key] componentsSeparatedByString:@":"]];
        if ([@(key).stringValue isEqualToString:keyval.firstObject]) {
            [keyval removeObjectAtIndex:0];
            return [keyval componentsJoinedByString:@":"];
        }
    }
    return nil;
}

void initSignVitalArray(int maxIndex) {
    vitalSignArray = [[NSMutableArray alloc] initWithCapacity:(2 * (maxIndex + 1))];
    for (int i = 0; i < 2 * (maxIndex + 1); i++) {
        [vitalSignArray addObject:@(-1).stringValue];
    }
}


/** Provider methods **/

void ios_passVitalSign(float value, int qual, int sign) {
    vitalSignArray[2 * ilogb(sign)]     = [NSString stringWithFormat:@"%d:%f",      ilogb(sign), value];
    vitalSignArray[2 * ilogb(sign) + 1] = [NSString stringWithFormat:@"%d-qual:%d", ilogb(sign), qual];
}

void ios_passVitalSignString(char* str, int qual, int sign) {
    vitalSignArray[2 * ilogb(sign)]     = [NSString stringWithFormat:@"%d:%@",      ilogb(sign), [NSString stringWithUTF8String:(const char*)str]];
    vitalSignArray[2 * ilogb(sign) + 1] = [NSString stringWithFormat:@"%d-qual:%d", ilogb(sign), qual];
}

void ios_finishVitalSign(bool success) {
    ios_passVitalSign(success, 0, SUCCESS_CODE);
    pasteboard.strings = vitalSignArray;
    [vitalSignArray release];
    if (alertViewDelegate) [alertViewDelegate release];
    openURL(sourceBundleID, YES);
}

int ios_getVitalSign(void) {
    return sign;
}

int ios_getExtraState(void) {
    return state;
}

void ios_registerVitalSign(int providerSign) {
    initSignVitalArray(ilogb(SUCCESS_CODE));
    pasteboard = [UIPasteboard pasteboardWithName:pasteboardName create:NO];
    sign  = [pasteboard.strings[0] substringFromIndex:1].intValue;
    state = [pasteboard.strings[1] substringFromIndex:1].intValue;
    if (((unsigned int) sign & (unsigned int) providerSign) < (unsigned int) sign) {
        alertViewDelegate = [AlertViewCancelDelegate new];
        showAlert([NSString stringWithFormat:@"Requested vital sign %d is not supported.", sign], @"");
    }
}


/** Requester methods **/

void ios_addExtras(int st) {
    state = st;
}

void ios_requestVitalSign(int sign) {
    pasteboard = [UIPasteboard pasteboardWithName:pasteboardName create:YES];
    [pasteboard setPersistent:YES];
    pasteboard.strings = @[[NSString stringWithFormat:@":%d", sign], [NSString stringWithFormat:@":%d", state]];
    if (!openURL(getURLScheme(sign), NO)) {
        showAlert(
            [NSString stringWithFormat:@"No app providing sign %d found on device.", sign], 
            [NSString stringWithFormat:@"Ensure that you have an app that can handle the URL scheme \"%@\".", getURLScheme(sign)]);
    }
}

//  0: in progress (URL not yet arrived)
// -1: sign not found - must be invalid
int ios_retrieveVitalSign(int sign) {
    NSString *success = getPasteboardVal(ilogb(SUCCESS_CODE));
    if (!success) {
        return 0;
    } else if (!success.intValue) {
        return -1;
    } else {
        NSString *vital = getPasteboardVal(ilogb(sign));
        return vital ? vital.intValue : -1;
    }
}

//   "": in progress (URL not yet arrived)
// NULL: sign not found - must be invalid
NSString *vitalString;
const char* ios_retrieveVitalSignString(int sign) {
    NSString *success = getPasteboardVal(ilogb(SUCCESS_CODE));
    if (!success) {
        return "";
    } else if (!success.intValue) {
        return NULL;
    } else {
        vitalString = [getPasteboardVal(ilogb(sign)) copy];
        return vitalString ? vitalString.UTF8String : NULL;
    }
}

void ios_retrieveVitalSignStringRelease(void) {
    if (vitalString) [vitalString release];
}
