/** Delegate for alerts **/

// need to declare before usage
void ios_finishVitalSign(bool success);

@interface AlertViewCancelDelegate : NSObject<UIAlertViewDelegate>
@end

@interface AlertViewFinishDelegate : NSObject<UIAlertViewDelegate>
@end

@implementation AlertViewCancelDelegate
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)index {
    ios_finishVitalSign(false);
}
@end

@implementation AlertViewFinishDelegate
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)index {
    if (index == [alertView cancelButtonIndex]) {
        ios_finishVitalSign(true);
    }
}
@end


/** Constants and variables **/

// vital sign code constants
typedef enum {
    HR        = 1,
    RR        = 2,
    SPO2      = 4,
    TEMP      = 8,
    BPSYS     = 16,
    BPDIA     = 32,
    RRTAPS    = 64,
    BP        = BPSYS | BPDIA,
    PO        = HR    | SPO2,
    RRATE     = RR    | RRTAPS
} VitalSignCode;

// vital sign URL schemes
static NSString *const svsHR     = @"svs-hr";
static NSString *const svsRR     = @"svs-rr";
static NSString *const svsSPO2   = @"svs-spo2";
static NSString *const svsTEMP   = @"svs-temp";
static NSString *const svsBPSYS  = @"svs-bpsys";
static NSString *const svsBPDIA  = @"svs-bpdia";
static NSString *const svsRRTAPS = @"svs-rrtaps";
static NSString *const svsBP     = @"svs-bp";
static NSString *const svsPO     = @"svs-po";
static NSString *const svsRRATE  = @"svs-rrate";

// other constants
static NSString *const SIGN    = @"sign";
static NSString *const STATE   = @"state";
static NSString *const SUCCESS = @"success";
static NSString *const pasteboardName = @"svsPasteboard";

// dynamically-allocated variables (need to be released)
NSMutableDictionary *vitalSignDict = nil;
NSString *sourceBundleID = nil;
NSObject<UIAlertViewDelegate> *alertViewDelegate = nil;

// extras
int sign  = 0;
int state = 0;


/** Helper functions **/

NSString* getURLScheme(VitalSignCode sign) {
    switch (sign) {
        case HR:     return svsHR;
        case RR:     return svsRR;
        case SPO2:   return svsSPO2;
        case TEMP:   return svsTEMP;
        case BPSYS:  return svsBPSYS;
        case BPDIA:  return svsBPDIA;
        case RRTAPS: return svsRRTAPS;
        case BP:     return svsBP;
        case PO:     return svsPO;
        case RRATE:  return svsRRATE;
        default:     return nil;
    }
}

BOOL openURL(NSString *scheme, BOOL releaseScheme) {
    NSURL *url = [NSURL URLWithString:[scheme stringByAppendingFormat:@"://"]];
    if (releaseScheme) [scheme release];
    return [[UIApplication sharedApplication] openURL:url];
}

void showAlert(NSString *title, NSString *message, NSString *cancelButton, NSString *otherButton) {
    UIAlertView *alert = [[UIAlertView alloc]
            initWithTitle:title message:message
            delegate:alertViewDelegate
            cancelButtonTitle:cancelButton
            otherButtonTitles:otherButton, nil];
    [alert show];
    [alert release];
}

void setDictionaryInPasteboard(NSString *name, NSDictionary *dict) {
    UIPasteboard *board = [UIPasteboard pasteboardWithName:name create:YES];
    [board setPersistent:YES];
    board.items = @[ @{name: [NSKeyedArchiver archivedDataWithRootObject:dict]} ];
}

NSDictionary* getDictionaryFromPasteboard(NSString *name) {
    UIPasteboard *board = [UIPasteboard pasteboardWithName:name create:NO];
    return (NSDictionary *) [NSKeyedUnarchiver unarchiveObjectWithData:board.items[0][name]];
}

NSString* getValueKey(int sign) {
    return @(ilogb(sign)).stringValue;
}

NSString* getQualKey(int sign) {
    return [NSString stringWithFormat:@"%d-qual", ilogb(sign)];
}


/** Provider methods **/

void ios_passVitalSign(float value, int qual, int sign) {
    vitalSignDict[getValueKey(sign)] = @(value);
    vitalSignDict[getQualKey(sign)]  = @(qual);
}

void ios_passVitalSignString(char* str, int qual, int sign) {
    vitalSignDict[getValueKey(sign)] = [NSString stringWithUTF8String:(const char*)str];
    vitalSignDict[getQualKey(sign)]  = @(qual);
}

void ios_finishVitalSign(bool success) {
    vitalSignDict[SUCCESS] = @(success);
    setDictionaryInPasteboard(pasteboardName, vitalSignDict);
    if (vitalSignDict)     [vitalSignDict release];
    if (alertViewDelegate) [alertViewDelegate release];
    openURL(sourceBundleID, YES);
}

void ios_showConfirmationDialog(char* msg, char* ok, char* cancel) {
    alertViewDelegate = [AlertViewFinishDelegate new];
    showAlert([NSString stringWithUTF8String:(const char*)msg],
              @"",
              [NSString stringWithUTF8String:(const char*)ok],
              [NSString stringWithUTF8String:(const char*)cancel]);
}

int ios_getVitalSign(void) {
    return sign;
}

int ios_getExtraState(void) {
    return state;
}

void ios_registerVitalSign(int providerSign) {
    NSDictionary *dict = getDictionaryFromPasteboard(pasteboardName);
    sign  = ((NSNumber *) dict[SIGN]).intValue;
    state = ((NSNumber *) dict[STATE]).intValue;
    if (((unsigned int) sign & (unsigned int) providerSign) < (unsigned int) sign) {
        alertViewDelegate = [AlertViewCancelDelegate new];
        showAlert([NSString stringWithFormat:@"Requested vital sign %d is not supported.", sign], @"", @"OK", nil);
    } else {
        vitalSignDict = [NSMutableDictionary new];
    }
}


/** Requester methods **/

void ios_addExtras(int st) {
    state = st;
}

void ios_requestVitalSign(int sign) {
    setDictionaryInPasteboard(pasteboardName, @{ SIGN: @(sign), STATE: @(state) });
    if (!openURL(getURLScheme(sign), NO)) {
        showAlert(
            [NSString stringWithFormat:@"No app providing sign %d found on device.", sign], 
            [NSString stringWithFormat:@"Ensure that you have an app that can handle the URL scheme \"%@\".", getURLScheme(sign)],
            @"OK", nil);
    }
}

//  0: in progress (URL not yet arrived)
// -1: sign not found - must be invalid
int ios_retrieveVitalSign(int sign) {
    NSDictionary *dict = getDictionaryFromPasteboard(pasteboardName);
    NSNumber *success = dict[SUCCESS];
    if (!success) {
        return 0;
    } else if (!success.intValue) {
        return -1;
    } else {
        NSNumber *vital = dict[getValueKey(sign)];
        return vital ? vital.intValue : -1;
    }
}

//   "": in progress (URL not yet arrived)
// NULL: sign not found - must be invalid
NSString *vitalString;
const char* ios_retrieveVitalSignString(int sign) {
    NSDictionary *dict = getDictionaryFromPasteboard(pasteboardName);
    NSNumber *success = dict[SUCCESS];
    if (!success) {
        return "";
    } else if (!success.intValue) {
        return NULL;
    } else {
        vitalString = [dict[getValueKey(sign)] copy];
        return vitalString ? vitalString.UTF8String : NULL;
    }
}

int ios_retrieveVitalSignQuality(int sign) {
    NSDictionary *dict = getDictionaryFromPasteboard(pasteboardName);
    NSNumber *success = dict[SUCCESS];
    if (!success) {
        return 0;
    } else if (!success.intValue) {
        return -1;
    } else {
        NSNumber *vital = dict[getQualKey(sign)];
        return vital ? vital.intValue : -1;
    }
}

void ios_retrieveVitalSignStringRelease(void) {
    if (vitalString) [vitalString release];
}
