// FFI for getting SharedVitalSigns data in and out of scheme
void android_passVitalSign(float value, int qual, int sign){
  JNIEnv *env = GetJNIEnv();
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env, globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "passVitalSign", "(FII)V");
    (*env)->CallVoidMethod(env, globalObj, method, value, qual, sign);
  }
}

void android_passVitalSignString(char* value, int qual, int sign){
  JNIEnv *env = GetJNIEnv();
  jstring jstr = (*env)->NewStringUTF(env, value);
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env, globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "passVitalSign", "(Ljava/lang/String;II)V");
    (*env)->CallVoidMethod(env, globalObj, method, jstr, qual, sign);
  }
}

void android_showConfirmationDialog(char* msg_message, char* msg_ok, char* msg_cancel){
  JNIEnv *env = GetJNIEnv();
  jstring jmes = (*env)->NewStringUTF(env, msg_message);
  jstring jok = (*env)->NewStringUTF(env, msg_ok);
  jstring jcancel = (*env)->NewStringUTF(env, msg_cancel);
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env, globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "jConfirmationDialog", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
    (*env)->CallVoidMethod(env, globalObj, method, jmes, jok, jcancel);
  }
}

int android_getVitalSign(){
  JNIEnv *env = GetJNIEnv();
  static int contype=1;

  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env, globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "getVitalSign", "()I");
    contype = (*env)->CallIntMethod(env, globalObj, method);
    return contype;
  }
  return contype;
}

int android_getExtraState(){
  JNIEnv *env = GetJNIEnv();
  static int contype = 0;

  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env, globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "getExtraState", "()I");
    contype = (*env)->CallIntMethod(env, globalObj, method);
    return contype;
  }
  return contype;
}

int android_retrieveVitalSign(int sign){
  JNIEnv *env = GetJNIEnv();
  static int contype=1;

  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env, globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "retrieveRequestedVitalSign", "(I)I");
    contype = (*env)->CallIntMethod(env, globalObj, method, sign);
    return contype;
  }
  return contype;
}

jstring jstr;
const char *s = NULL;
const char* android_retrieveVitalSignString(int sign) {
  JNIEnv *env = GetJNIEnv();
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env, globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "retrieveRequestedVitalSignString", "(I)Ljava/lang/String;");
    jstr = (jstring) (*env)->CallObjectMethod(env, globalObj, method, sign);
    s = (*env)->GetStringUTFChars(env, jstr, 0);
    return s;
  }
  return NULL;
}

void android_retrieveVitalSignStringRelease() {
  if (jstr && s) {
    JNIEnv *env = GetJNIEnv();
    (*env)->ReleaseStringUTFChars(env, jstr, s);
    s = NULL;
  }
}

void android_finishVitalSign(){
  JNIEnv *env = GetJNIEnv();
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env, globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "transmitVitalSign", "()V");
    (*env)->CallVoidMethod(env, globalObj, method);
  }
}

void android_cancel(){
  JNIEnv *env = GetJNIEnv();
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env, globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "cancel", "()V");
    (*env)->CallVoidMethod(env, globalObj, method);
  }
}

void android_registerVitalSign(int sign){
  JNIEnv *env = GetJNIEnv();
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env,globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "registerVitalSigns", "(I)V");
    (*env)->CallVoidMethod(env, globalObj, method, sign);
  }
}

void android_requestVitalSign(int sign){
  JNIEnv *env = GetJNIEnv();
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env,globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "requestVitalSigns", "(I)V");
    (*env)->CallVoidMethod(env, globalObj, method, sign);
  }
}

void android_requestVitalSignWithState(int sign){
  JNIEnv *env = GetJNIEnv();
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env,globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "requestVitalSigns", "(I)V");
    (*env)->CallVoidMethod(env, globalObj, method, sign);
  }
}

void android_addExtras(int state){
  JNIEnv *env = GetJNIEnv();
  if (env&&globalObj){
    jclass cls = (*env)->GetObjectClass(env,globalObj);
    jmethodID method = (*env)->GetMethodID(env, cls, "addExtras", "(I)V");
    (*env)->CallVoidMethod(env, globalObj, method, state);
  }
}