;; Philips Intellivue Parser
;; Chris Petersen, 2011
;; Matthias GÃ¶rges, 2016

(define (ivueparser:parseAttributeList buf)
  (let ((count (u8data-u16 (subu8data buf 0 2)))
        (len (u8data-u16 (subu8data buf 2 4))))
    (let loop ((n 0)(p (ivueparser:skip payload 4)))
      (if (or (fx= ct 0) (fx= (u8data-length p) 0))
        p
        (loop (fx+ n 1) (ivueparser:parseAVAType p))
      )
    )
  ))

(define (ivueparser:parseAVAType buf)
  (let ((attribute_id (u8data-u16 (subu8data buf 0 2)))
        (len (u8data-u16 (subu8data buf 2 4)))
        (val (ivueparser:skip buf 4)))
    (cond
      ((fx= id NOM_ATTR_PT_NAME_GIVEN)
        (ivueparser:parseAttrString "patient_given_name" payload len))
      ((fx= id NOM_ATTR_PT_NAME_MIDDLE)
        (ivueparser:parseAttrString "patient_middle_name" payload len))
      ((fx= id NOM_ATTR_PT_NAME_FAMILY)
        (ivueparser:parseAttrString "patient_family_name" payload len))
      ((fx= id NOM_ATTR_PT_ID)
        (ivueparser:parseAttrString "patient_id" payload len))
      ((fx= id NOM_ATTR_PT_ENCOUNTER_ID)
        (ivueparser:parseAttrString "patient_encounter_id" payload len))
      ((fx= id NOM_ATTR_PT_SEX)
        (ivueparser:parseSex payload))
      ((fx= id NOM_ATTR_PT_DOB)
        (ivueparser:parseAbsoluteTimeStamp "patient_dob" payload))
      ((fx= id NOM_ATTR_PT_HEIGHT)
        (ivueparser:parsePatMeasure "patient_height" payload))
      ((fx= id NOM_ATTR_PT_WEIGHT)
        (ivueparser:parsePatMeasure "patient_weight" payload))
      ((fx= id NOM_ATTR_PT_AGE)
        (ivueparser:parsePatMeasure "patient_age" payload))
      ((fx= id NOM_ATTR_PT_BSA)
        (ivueparser:parsePatMeasure "patient_bsa" payload))
      ((fx= id NOM_ATTR_PT_NOTES1)
        (ivueparser:parseAttrString "patient_notes1" payload len))
      ((fx= id NOM_ATTR_PT_NOTES2)
        (ivueparser:parseAttrString "patient_notes2" payload len))
      ((fx= id NOM_ATTR_PT_TYPE)
        (ivueparser:parsePatType payload))
      ((fx= id NOM_ATTR_PT_PACED_MODE)
        (ivueparser:parsePacedMode payload))
      ((fx= id NOM_ATTR_PT_ID_INT)
        (ivueparser:parsePatIdInt payload len))
      (else
        (ivueparser:log 1 "ivueparser: unknown attribute " id " [" len "]" (u8data->u8vector (subu8data val 0 len)))
      )
    )
    (ivueparser:skip val len)
  ))

(define (ivueparser:parseSex buf)
  (let* ((sex (u8data-u16 (subu8data buf 0 2)))
         (sexstr (cond
                   ((fx= sex MALE) "Male")
                   ((fx= sex FEMALE) "Female")
                   (else "Unknown"))))
    (store-set! ivueparser:store "patient_sex" sexstr "ivue")
    (ivueparser:log 1 "ivueparser: patient_sex" sexstr)
  ))

(define (ivueparser:parsePatMeasure label buf)
  (let ((value (ivueparser:decodef32 (subu8data buf 0 4)))
        (m_unit (u8data-u16 (subu8data buf 4 6))))
    (store-set! ivueparser:store label value "ivue")
    (ivueparser:log 1 "ivueparser:" label value)
  ))

(define (ivueparser:parsePatType buf)
  (let* ((type (u8data-u16 (subu8data buf 0 2)))
         (typestr (cond
                   ((fx= type ADULT) "Adult")
                   ((fx= type PEDIATRIC) "Child")
                   ((fx= type NEONATAL) "Neonate")
                   (else "Unspecified"))))
    (store-set! ivueparser:store "patient_type" typestr "ivue")
    (ivueparser:log 1 "ivueparser: patient_type" typestr)
  ))

(define (ivueparser:parsePacedMode buf)
  (let ((mode (u8data-u16 (subu8data buf 0 2))))
    (store-set! ivueparser:store "patient_paced_mode" mode "ivue")
    (ivueparser:log 1 "ivueparser:" "patient_paced_mode" mode)
  ))

(define (ivueparser:parsePatIdInt buf len)
  (let ((id (u8data->u8vector (subu8data buf 0 len))))
    (store-set! ivueparser:store "patient_id_int" id "ivue")
    (ivueparser:log 1 "ivueparser:" "patient_id_int" id)
  ))

;; eof
